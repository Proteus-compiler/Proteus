[0m[[0m[0mdebug[0m] [0m[0mCreated transactional ClassFileManager with tempDir = /Users/MorganBarrett/Desktop/School/CSUN/Spring 2024/COMP 430/Scala Compiler/Proteus/Compiler/target/scala-3.3.1/classes.bak[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to delete class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mWe backup class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mCreated transactional ClassFileManager with tempDir = /Users/MorganBarrett/Desktop/School/CSUN/Spring 2024/COMP 430/Scala Compiler/Proteus/Compiler/target/scala-3.3.1/classes.bak[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to delete class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mWe backup class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mRegistering generated classes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sendToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightBracesToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	falseToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	trueToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	boolToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	entryToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	goifToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightParenToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IntegerLiteralToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	printlnToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	constToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	mulEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	printlnToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	onToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	returnToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	commaToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	notToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	modEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftParenToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	divEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	modEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	goifToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	whileToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	divideToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	statenameToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	exitToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	multiplyToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	constToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	monitorToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	stateToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	initialToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ifToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	funcToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	exitToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	notToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	mulEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	actorToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	stringToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	statemachineToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	commaToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Token.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdentifierToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	boolToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftBracesToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightBracesToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	goToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	trueToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventnameToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	entryToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Tokenizer$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	falseToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	returnToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	sendToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	whileToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalOrToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	intToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalOrToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	singleEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	statenameToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	singleEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	funcToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	printToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	stringToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Tokenizer.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	semicolonToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	notEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	divideToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	elseToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	elseToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalAndToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	semicolonToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	initialToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalAndToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	divEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	onToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StringLiteralToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	actornameToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	actorToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	multiplyToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	monitorToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdentifierToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	printToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	statemachineToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventnameToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	actornameToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IntegerLiteralToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	moduloToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftBracesToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	stateToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftParenToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	goToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowEqualsToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	StringLiteralToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	ifToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	waitToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	moduloToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	waitToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightParenToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	notEqualsToken.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	intToken$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	sendToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightBracesToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	falseToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	trueToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	boolToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	entryToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	goifToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightParenToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IntegerLiteralToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	printlnToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	constToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	mulEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	printlnToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	onToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	returnToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	commaToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	notToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	modEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftParenToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	divEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	modEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	goifToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	whileToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	divideToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	statenameToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	exitToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	multiplyToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	constToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	monitorToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	stateToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	initialToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ifToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	funcToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	exitToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	notToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	mulEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	actorToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	stringToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	statemachineToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	commaToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Token.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdentifierToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	boolToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftBracesToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightBracesToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	goToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	trueToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventnameToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	entryToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Tokenizer$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	falseToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	returnToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	sendToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	whileToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalOrToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	intToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalOrToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	singleEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	statenameToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	singleEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleRightArrowToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	funcToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	printToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	stringToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftArrowEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Tokenizer.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	semicolonToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	notEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	divideToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	elseToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	elseToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalAndToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	semicolonToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	initialToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	logicalAndToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightArrowToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	divEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	onToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StringLiteralToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	actornameToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	actorToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	multiplyToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	plusEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	monitorToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IdentifierToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	printToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	statemachineToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	minusToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	eventnameToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	actornameToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IntegerLiteralToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	moduloToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftBracesToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	stateToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	leftParenToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	goToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowEqualsToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	doubleLeftArrowToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	StringLiteralToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	ifToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	waitToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	moduloToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	waitToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	upArrowEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	rightParenToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	notEqualsToken.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	intToken$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0mRemoving the temporary directory used for backing up class files: /Users/MorganBarrett/Desktop/School/CSUN/Spring 2024/COMP 430/Scala Compiler/Proteus/Compiler/target/scala-3.3.1/classes.bak[0m
